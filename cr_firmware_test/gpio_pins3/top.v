// MODULE top, AUTOMATICALLY GENERATED BY PYTHON

/**/
`default_nettype wire


module top (
  // gpio: in_pin
    input [0:0] gpio_gpio_1_1_ext,
  // gpio: led0
    output [0:0] gpio_led_0_0_ext,
  // onegbe: one_gbe
    input gpio_pins3_one_gbe_mgt_clk_n,
    input gpio_pins3_one_gbe_mgt_clk_p,
    input gpio_pins3_one_gbe_sfp_rx_n,
    input gpio_pins3_one_gbe_sfp_rx_p,
    output gpio_pins3_one_gbe_sfp_tx_n,
    output gpio_pins3_one_gbe_sfp_tx_p,
    output phy_rst_n,
  // gpio: out_pin
    output [0:0] gpio_gpio_2_2_ext,
  // snap2: SNAP2
    input sys_clk_n,
    input sys_clk_p,
  // microblaze: microblaze0
    input UART_rxd,
    output UART_txd
  );



  // usermodule: gpio_pins3
  localparam GPIO_PINS3_A_WBID0 = 0;
  localparam GPIO_PINS3_B_WBID0 = 1;
  localparam GPIO_PINS3_ONE_GBE_WBID0 = 2;
  localparam GPIO_PINS3_READOUT_STATE_VALUE_WBID0 = 3;
  localparam GPIO_PINS3_RESET_TO_LISTEN_WBID0 = 4;
  localparam GPIO_PINS3_SEND_TRIGGER_WBID0 = 5;
  localparam GPIO_PINS3_SNAPSHOT_COUNTER_WBID0 = 7;
  localparam GPIO_PINS3_SNAPSHOT_COUNT_RESET_WBID0 = 6;
  localparam GPIO_PINS3_SUM_AB_WBID0 = 8;
  localparam GPIO_PINS3_TRIG_DEBUG_RESET_WBID0 = 9;
  localparam GPIO_PINS3_TRIG_DEBUG_TIMER_RESET_WBID0 = 11;
  localparam GPIO_PINS3_TRIG_DEBUG_TIMER_WBID0 = 10;
  localparam GPIO_PINS3_TRIG_DEBUG_TRIG_REC_COUNT_WBID0 = 12;
  localparam N_WB_SLAVES = 14;
  localparam SLAVE_ADDR = {
    32'h00020030, // sys_block
    32'h0002002c, // trig_debug_trig_rec_count
    32'h00020028, // trig_debug_timer_reset
    32'h00020024, // trig_debug_timer
    32'h00020020, // trig_debug_reset
    32'h0002001c, // sum_ab
    32'h00020018, // snapshot_counter
    32'h00020014, // snapshot_count_reset
    32'h00020010, // send_trigger
    32'h0002000c, // reset_to_listen
    32'h00020008, // readout_state_value
    32'h00010008, // one_gbe
    32'h00010004, // b
    32'h00010000 // a
    };
  localparam SLAVE_HIGH = {
    32'h0002004f, // sys_block
    32'h0002002f, // trig_debug_trig_rec_count
    32'h0002002b, // trig_debug_timer_reset
    32'h00020027, // trig_debug_timer
    32'h00020023, // trig_debug_reset
    32'h0002001f, // sum_ab
    32'h0002001b, // snapshot_counter
    32'h00020017, // snapshot_count_reset
    32'h00020013, // send_trigger
    32'h0002000f, // reset_to_listen
    32'h0002000b, // readout_state_value
    32'h00020007, // one_gbe
    32'h00010007, // b
    32'h00010003 // a
    };
  localparam SYS_BLOCK_INST_WBID0 = 13;

/*
  _____ _                   _     
 / ____(_)                 | |    
| (___  _  __ _ _ __   __ _| |___ 
 \___ \| |/ _` | '_ \ / _` | / __|
 ____) | | (_| | | | | (_| | \__ \ 
|_____/|_|\__, |_| |_|\__,_|_|___/
          __/ |                  
         |___/                   
*/
  // xsg: SNAP2
  (* keep = "true" *) wire user_clk;
  (* keep = "true" *) wire user_clk180;
  (* keep = "true" *) wire user_clk270;
  (* keep = "true" *) wire user_clk90;
  // sw_reg: a
  wire [31:0] gpio_pins3_a_user_data_out;
  // sw_reg: b
  wire [31:0] gpio_pins3_b_user_data_out;
  // gpio: in_pin
  wire [0:0] gpio_pins3_in_pin_gateway;
  // gpio: led0
  wire [0:0] gpio_pins3_led0_gateway;
  // onegbe: one_gbe
  wire clk_200;
  wire gbe_mgt_clk;
  wire gbe_mmcm_locked_out;
  wire gbe_rxuserclk2_out;
  wire gbe_rxuserclk_out;
  wire gbe_userclk2_out;
  wire gbe_userclk_out;
  wire [31:0] gpio_pins3_one_gbe_app_dbg_data;
  wire gpio_pins3_one_gbe_app_dbg_dvld;
  wire gpio_pins3_one_gbe_app_rx_ack;
  wire gpio_pins3_one_gbe_app_rx_badframe;
  wire [7:0] gpio_pins3_one_gbe_app_rx_data;
  wire gpio_pins3_one_gbe_app_rx_dvld;
  wire gpio_pins3_one_gbe_app_rx_eof;
  wire gpio_pins3_one_gbe_app_rx_overrun;
  wire gpio_pins3_one_gbe_app_rx_rst;
  wire [31:0] gpio_pins3_one_gbe_app_rx_srcip;
  wire [15:0] gpio_pins3_one_gbe_app_rx_srcport;
  wire gpio_pins3_one_gbe_app_tx_afull;
  wire [7:0] gpio_pins3_one_gbe_app_tx_data;
  wire [31:0] gpio_pins3_one_gbe_app_tx_destip;
  wire [15:0] gpio_pins3_one_gbe_app_tx_destport;
  wire gpio_pins3_one_gbe_app_tx_dvld;
  wire gpio_pins3_one_gbe_app_tx_eof;
  wire gpio_pins3_one_gbe_app_tx_overflow;
  wire gpio_pins3_one_gbe_app_tx_rst;
  wire [7:0] gpio_pins3_one_gbe_mac_gmii_rx_data;
  wire gpio_pins3_one_gbe_mac_gmii_rx_dvld;
  wire gpio_pins3_one_gbe_mac_gmii_rx_er;
  wire [7:0] gpio_pins3_one_gbe_mac_gmii_tx_data;
  wire gpio_pins3_one_gbe_mac_gmii_tx_en;
  wire gpio_pins3_one_gbe_mac_gmii_tx_er;
  wire gpio_pins3_one_gbe_mac_rx_badframe;
  wire [7:0] gpio_pins3_one_gbe_mac_rx_data;
  wire gpio_pins3_one_gbe_mac_rx_dvld;
  wire gpio_pins3_one_gbe_mac_rx_goodframe;
  wire gpio_pins3_one_gbe_mac_syncacquired;
  wire gpio_pins3_one_gbe_mac_tx_ack;
  wire [7:0] gpio_pins3_one_gbe_mac_tx_data;
  wire gpio_pins3_one_gbe_mac_tx_dvld;
  wire [15:0] gpio_pins3_one_gbe_phy_status;
  wire gpio_pins3_one_gbe_reset_done;
  wire sys_rst;
  // gpio: out_pin
  wire [0:0] gpio_pins3_out_pin_gateway;
  // sw_reg: readout_state_value
  wire [31:0] gpio_pins3_readout_state_value_user_data_in;
  // sw_reg: reset_to_listen
  wire [31:0] gpio_pins3_reset_to_listen_user_data_out;
  // sw_reg: send_trigger
  wire [31:0] gpio_pins3_send_trigger_user_data_out;
  // sw_reg: snapshot_count_reset
  wire [31:0] gpio_pins3_snapshot_count_reset_user_data_out;
  // sw_reg: snapshot_counter
  wire [31:0] gpio_pins3_snapshot_counter_user_data_in;
  // sw_reg: sum_ab
  wire [31:0] gpio_pins3_sum_ab_user_data_in;
  // sw_reg: trig_debug_reset
  wire [31:0] gpio_pins3_trig_debug_reset_user_data_out;
  // sw_reg: trig_debug_timer
  wire [31:0] gpio_pins3_trig_debug_timer_user_data_in;
  // sw_reg: trig_debug_timer_reset
  wire [31:0] gpio_pins3_trig_debug_timer_reset_user_data_out;
  // sw_reg: trig_debug_trig_rec_count
  wire [31:0] gpio_pins3_trig_debug_trig_rec_count_user_data_in;
  // snap2: SNAP2
  wire clk_10MHz;
  wire clk_250MHz;
  wire clk_250MHz180;
  wire clk_250MHz270;
  wire clk_250MHz90;
  wire pll_lock;
  wire sys_clk;
  wire sys_clk180;
  wire sys_clk270;
  wire sys_clk90;
  // microblaze: microblaze0
  wire mb_intr;
  wire [3:0] mb_intr_v;
  wire wb_rst_i;
  wire wbm_ack_i;
  wire [31:0] wbm_adr_o;
  wire wbm_cyc_o;
  wire [31:0] wbm_dat_i;
  wire [31:0] wbm_dat_o;
  wire wbm_rst_o;
  wire [3:0] wbm_sel_o;
  wire wbm_stb_o;
  wire wbm_we_o;
  // usermodule: gpio_pins3
  (* keep = "true" *) wire wb_clk_i;
  wire wbm_err_i;
  wire [13:0] wbs_ack_i;
  wire [31:0] wbs_adr_o;
  wire [13:0] wbs_cyc_o;
  wire [447:0] wbs_dat_i;
  wire [31:0] wbs_dat_o;
  wire [13:0] wbs_err_i;
  wire [3:0] wbs_sel_o;
  wire [13:0] wbs_stb_o;
  wire wbs_we_o;

/*
  _____           _                            
 |_   _|         | |                           
   | |  _ __  ___| |_ __ _ _ __   ___ ___  ___ 
   | | | '_ \/ __| __/ _` | '_ \ / __/ _ \/ __|
  _| |_| | | \__ \ || (_| | | | | (_|  __/\__ \ 
 |_____|_| |_|___/\__\__,_|_| |_|\___\___||___/
*/
  // sw_reg: a
  wb_register_ppc2simulink #(
    .INIT_VAL(32'h0)
  ) gpio_pins3_a (
    .user_clk(user_clk),
    .user_data_out(gpio_pins3_a_user_data_out),
    .wb_ack_o(wbs_ack_i[GPIO_PINS3_A_WBID0]),
    .wb_adr_i(wbs_adr_o[(0+1)*32-1:(0)*32]),
    .wb_clk_i(wb_clk_i),
    .wb_cyc_i(wbs_cyc_o[GPIO_PINS3_A_WBID0]),
    .wb_dat_i(wbs_dat_o),
    .wb_dat_o(wbs_dat_i[(GPIO_PINS3_A_WBID0+1)*32-1:(GPIO_PINS3_A_WBID0)*32]),
    .wb_err_o(wbs_err_i[GPIO_PINS3_A_WBID0]),
    .wb_rst_i(wb_rst_i),
    .wb_sel_i(wbs_sel_o),
    .wb_stb_i(wbs_stb_o[GPIO_PINS3_A_WBID0]),
    .wb_we_i(wbs_we_o)
  );

  // sw_reg: b
  wb_register_ppc2simulink #(
    .INIT_VAL(32'h0)
  ) gpio_pins3_b (
    .user_clk(user_clk),
    .user_data_out(gpio_pins3_b_user_data_out),
    .wb_ack_o(wbs_ack_i[GPIO_PINS3_B_WBID0]),
    .wb_adr_i(wbs_adr_o[(0+1)*32-1:(0)*32]),
    .wb_clk_i(wb_clk_i),
    .wb_cyc_i(wbs_cyc_o[GPIO_PINS3_B_WBID0]),
    .wb_dat_i(wbs_dat_o),
    .wb_dat_o(wbs_dat_i[(GPIO_PINS3_B_WBID0+1)*32-1:(GPIO_PINS3_B_WBID0)*32]),
    .wb_err_o(wbs_err_i[GPIO_PINS3_B_WBID0]),
    .wb_rst_i(wb_rst_i),
    .wb_sel_i(wbs_sel_o),
    .wb_stb_i(wbs_stb_o[GPIO_PINS3_B_WBID0]),
    .wb_we_i(wbs_we_o)
  );

  // gpio: in_pin
  gpio_ext2simulink #(
    .CLK_PHASE(0),
    .DDR(0),
    .REG_IOB("true"),
    .WIDTH(1)
  ) gpio_pins3_in_pin (
    .clk(user_clk),
    .clk90(user_clk90),
    .gateway(gpio_pins3_in_pin_gateway),
    .io_pad(gpio_gpio_1_1_ext)
  );

  // gpio: led0
  gpio_simulink2ext #(
    .CLK_PHASE(0),
    .DDR(0),
    .REG_IOB("true"),
    .WIDTH(1)
  ) gpio_pins3_led0 (
    .clk(user_clk),
    .clk90(user_clk90),
    .gateway(gpio_pins3_led0_gateway),
    .io_pad(gpio_led_0_0_ext)
  );

  // onegbe: one_gbe
  // gpio_pins3_one_gbe
  gbe_udp #(
    .CPU_PROMISCUOUS(1),
    .DIS_CPU_RX(0),
    .DIS_CPU_TX(0),
    .LOCAL_ENABLE(1),
    .LOCAL_GATEWAY(32'd1),
    .LOCAL_IP(32'd3232246026),
    .LOCAL_MAC(48'd20015998343868),
    .LOCAL_PORT(16'd4321)
  ) gpio_pins3_one_gbe (
    .app_clk(user_clk),
    .app_dbg_data(gpio_pins3_one_gbe_app_dbg_data),
    .app_dbg_dvld(gpio_pins3_one_gbe_app_dbg_dvld),
    .app_rx_ack(gpio_pins3_one_gbe_app_rx_ack),
    .app_rx_badframe(gpio_pins3_one_gbe_app_rx_badframe),
    .app_rx_data(gpio_pins3_one_gbe_app_rx_data),
    .app_rx_dvld(gpio_pins3_one_gbe_app_rx_dvld),
    .app_rx_eof(gpio_pins3_one_gbe_app_rx_eof),
    .app_rx_overrun(gpio_pins3_one_gbe_app_rx_overrun),
    .app_rx_rst(gpio_pins3_one_gbe_app_rx_rst),
    .app_rx_srcip(gpio_pins3_one_gbe_app_rx_srcip),
    .app_rx_srcport(gpio_pins3_one_gbe_app_rx_srcport),
    .app_tx_afull(gpio_pins3_one_gbe_app_tx_afull),
    .app_tx_data(gpio_pins3_one_gbe_app_tx_data),
    .app_tx_destip(gpio_pins3_one_gbe_app_tx_destip),
    .app_tx_destport(gpio_pins3_one_gbe_app_tx_destport),
    .app_tx_dvld(gpio_pins3_one_gbe_app_tx_dvld),
    .app_tx_eof(gpio_pins3_one_gbe_app_tx_eof),
    .app_tx_overflow(gpio_pins3_one_gbe_app_tx_overflow),
    .app_tx_rst(gpio_pins3_one_gbe_app_tx_rst),
    .mac_rx_badframe(gpio_pins3_one_gbe_mac_rx_badframe),
    .mac_rx_clk(gbe_userclk2_out),
    .mac_rx_data(gpio_pins3_one_gbe_mac_rx_data),
    .mac_rx_dvld(gpio_pins3_one_gbe_mac_rx_dvld),
    .mac_rx_goodframe(gpio_pins3_one_gbe_mac_rx_goodframe),
    .mac_rx_rst(gpio_pins3_one_gbe_app_rx_rst),
    .mac_syncacquired(gpio_pins3_one_gbe_mac_syncacquired),
    .mac_tx_ack(gpio_pins3_one_gbe_mac_tx_ack),
    .mac_tx_clk(gbe_userclk2_out),
    .mac_tx_data(gpio_pins3_one_gbe_mac_tx_data),
    .mac_tx_dvld(gpio_pins3_one_gbe_mac_tx_dvld),
    .mac_tx_rst(gpio_pins3_one_gbe_app_tx_rst),
    .phy_status(gpio_pins3_one_gbe_phy_status),
    .wb_ack_o(wbs_ack_i[GPIO_PINS3_ONE_GBE_WBID0]),
    .wb_adr_i(wbs_adr_o[(0+1)*32-1:(0)*32]),
    .wb_clk_i(wb_clk_i),
    .wb_cyc_i(wbs_cyc_o[GPIO_PINS3_ONE_GBE_WBID0]),
    .wb_dat_i(wbs_dat_o),
    .wb_dat_o(wbs_dat_i[(GPIO_PINS3_ONE_GBE_WBID0+1)*32-1:(GPIO_PINS3_ONE_GBE_WBID0)*32]),
    .wb_err_o(wbs_err_i[GPIO_PINS3_ONE_GBE_WBID0]),
    .wb_rst_i(wb_rst_i),
    .wb_sel_i(wbs_sel_o),
    .wb_stb_i(wbs_stb_o[GPIO_PINS3_ONE_GBE_WBID0]),
    .wb_we_i(wbs_we_o)
  );


  // gpio_pins3_one_gbe
  gig_eth_mac #(
    .MAX_FRAME_SIZE_JUMBO(9022),
    .MAX_FRAME_SIZE_STANDARD(1522)
  ) gpio_pins3_one_gbe_mac (
    .conf_rx_en(1),
    .conf_rx_jumbo_en(1),
    .conf_rx_no_chk_crc(0),
    .conf_tx_en(1),
    .conf_tx_jumbo_en(1),
    .conf_tx_no_gen_crc(0),
    .gmii_col(0),
    .gmii_crs(0),
    .gmii_rx_data(gpio_pins3_one_gbe_mac_gmii_rx_data),
    .gmii_rx_dvld(gpio_pins3_one_gbe_mac_gmii_rx_dvld),
    .gmii_rx_er(gpio_pins3_one_gbe_mac_gmii_rx_er),
    .gmii_tx_data(gpio_pins3_one_gbe_mac_gmii_tx_data),
    .gmii_tx_en(gpio_pins3_one_gbe_mac_gmii_tx_en),
    .gmii_tx_er(gpio_pins3_one_gbe_mac_gmii_tx_er),
    .mac_rx_badframe(gpio_pins3_one_gbe_mac_rx_badframe),
    .mac_rx_data(gpio_pins3_one_gbe_mac_rx_data),
    .mac_rx_dvld(gpio_pins3_one_gbe_mac_rx_dvld),
    .mac_rx_goodframe(gpio_pins3_one_gbe_mac_rx_goodframe),
    .mac_tx_ack(gpio_pins3_one_gbe_mac_tx_ack),
    .mac_tx_data(gpio_pins3_one_gbe_mac_tx_data),
    .mac_tx_dvld(gpio_pins3_one_gbe_mac_tx_dvld),
    .mac_tx_underrun(0),
    .reset(sys_rst),
    .rx_clk(gbe_userclk2_out),
    .tx_clk(gbe_userclk2_out)
  );


  gig_ethernet_pcs_pma_sgmii_autonegotiation  gpio_pins3_one_gbe_pcs_pma (
    .an_adv_config_vector(16'b1001100000000001),
    .an_interrupt(),
    .an_restart_config(1'b0),
    .configuration_vector(5'b10000),
    .gmii_isolate(),
    .gmii_rx_dv(gpio_pins3_one_gbe_mac_gmii_rx_dvld),
    .gmii_rx_er(gpio_pins3_one_gbe_mac_gmii_rx_er),
    .gmii_rxd(gpio_pins3_one_gbe_mac_gmii_rx_data),
    .gmii_tx_en(gpio_pins3_one_gbe_mac_gmii_tx_en),
    .gmii_tx_er(gpio_pins3_one_gbe_mac_gmii_tx_er),
    .gmii_txd(gpio_pins3_one_gbe_mac_gmii_tx_data),
    .gtrefclk_n(gpio_pins3_one_gbe_mgt_clk_n),
    .gtrefclk_out(gbe_mgt_clk),
    .gtrefclk_p(gpio_pins3_one_gbe_mgt_clk_p),
    .independent_clock_bufg(clk_200),
    .mmcm_locked_out(gbe_mmcm_locked_out),
    .pma_reset_out(),
    .reset(sys_rst),
    .resetdone(gpio_pins3_one_gbe_reset_done),
    .rxn(gpio_pins3_one_gbe_sfp_rx_n),
    .rxp(gpio_pins3_one_gbe_sfp_rx_p),
    .rxuserclk2_out(gbe_rxuserclk2_out),
    .rxuserclk_out(gbe_rxuserclk_out),
    .sgmii_clk_en(),
    .sgmii_clk_f(),
    .sgmii_clk_r(),
    .signal_detect(1),
    .speed_is_100(0),
    .speed_is_10_100(0),
    .status_vector(gpio_pins3_one_gbe_phy_status),
    .txn(gpio_pins3_one_gbe_sfp_tx_n),
    .txp(gpio_pins3_one_gbe_sfp_tx_p),
    .userclk2_out(gbe_userclk2_out),
    .userclk_out(gbe_userclk_out)
  );

  // gpio: out_pin
  gpio_simulink2ext #(
    .CLK_PHASE(0),
    .DDR(0),
    .REG_IOB("true"),
    .WIDTH(1)
  ) gpio_pins3_out_pin (
    .clk(user_clk),
    .clk90(user_clk90),
    .gateway(gpio_pins3_out_pin_gateway),
    .io_pad(gpio_gpio_2_2_ext)
  );

  // sw_reg: readout_state_value
  wb_register_simulink2ppc  gpio_pins3_readout_state_value (
    .user_clk(user_clk),
    .user_data_in(gpio_pins3_readout_state_value_user_data_in),
    .wb_ack_o(wbs_ack_i[GPIO_PINS3_READOUT_STATE_VALUE_WBID0]),
    .wb_adr_i(wbs_adr_o[(0+1)*32-1:(0)*32]),
    .wb_clk_i(wb_clk_i),
    .wb_cyc_i(wbs_cyc_o[GPIO_PINS3_READOUT_STATE_VALUE_WBID0]),
    .wb_dat_i(wbs_dat_o),
    .wb_dat_o(wbs_dat_i[(GPIO_PINS3_READOUT_STATE_VALUE_WBID0+1)*32-1:(GPIO_PINS3_READOUT_STATE_VALUE_WBID0)*32]),
    .wb_err_o(wbs_err_i[GPIO_PINS3_READOUT_STATE_VALUE_WBID0]),
    .wb_rst_i(wb_rst_i),
    .wb_sel_i(wbs_sel_o),
    .wb_stb_i(wbs_stb_o[GPIO_PINS3_READOUT_STATE_VALUE_WBID0]),
    .wb_we_i(wbs_we_o)
  );

  // sw_reg: reset_to_listen
  wb_register_ppc2simulink #(
    .INIT_VAL(32'h0)
  ) gpio_pins3_reset_to_listen (
    .user_clk(user_clk),
    .user_data_out(gpio_pins3_reset_to_listen_user_data_out),
    .wb_ack_o(wbs_ack_i[GPIO_PINS3_RESET_TO_LISTEN_WBID0]),
    .wb_adr_i(wbs_adr_o[(0+1)*32-1:(0)*32]),
    .wb_clk_i(wb_clk_i),
    .wb_cyc_i(wbs_cyc_o[GPIO_PINS3_RESET_TO_LISTEN_WBID0]),
    .wb_dat_i(wbs_dat_o),
    .wb_dat_o(wbs_dat_i[(GPIO_PINS3_RESET_TO_LISTEN_WBID0+1)*32-1:(GPIO_PINS3_RESET_TO_LISTEN_WBID0)*32]),
    .wb_err_o(wbs_err_i[GPIO_PINS3_RESET_TO_LISTEN_WBID0]),
    .wb_rst_i(wb_rst_i),
    .wb_sel_i(wbs_sel_o),
    .wb_stb_i(wbs_stb_o[GPIO_PINS3_RESET_TO_LISTEN_WBID0]),
    .wb_we_i(wbs_we_o)
  );

  // sw_reg: send_trigger
  wb_register_ppc2simulink #(
    .INIT_VAL(32'h0)
  ) gpio_pins3_send_trigger (
    .user_clk(user_clk),
    .user_data_out(gpio_pins3_send_trigger_user_data_out),
    .wb_ack_o(wbs_ack_i[GPIO_PINS3_SEND_TRIGGER_WBID0]),
    .wb_adr_i(wbs_adr_o[(0+1)*32-1:(0)*32]),
    .wb_clk_i(wb_clk_i),
    .wb_cyc_i(wbs_cyc_o[GPIO_PINS3_SEND_TRIGGER_WBID0]),
    .wb_dat_i(wbs_dat_o),
    .wb_dat_o(wbs_dat_i[(GPIO_PINS3_SEND_TRIGGER_WBID0+1)*32-1:(GPIO_PINS3_SEND_TRIGGER_WBID0)*32]),
    .wb_err_o(wbs_err_i[GPIO_PINS3_SEND_TRIGGER_WBID0]),
    .wb_rst_i(wb_rst_i),
    .wb_sel_i(wbs_sel_o),
    .wb_stb_i(wbs_stb_o[GPIO_PINS3_SEND_TRIGGER_WBID0]),
    .wb_we_i(wbs_we_o)
  );

  // sw_reg: snapshot_count_reset
  wb_register_ppc2simulink #(
    .INIT_VAL(32'h0)
  ) gpio_pins3_snapshot_count_reset (
    .user_clk(user_clk),
    .user_data_out(gpio_pins3_snapshot_count_reset_user_data_out),
    .wb_ack_o(wbs_ack_i[GPIO_PINS3_SNAPSHOT_COUNT_RESET_WBID0]),
    .wb_adr_i(wbs_adr_o[(0+1)*32-1:(0)*32]),
    .wb_clk_i(wb_clk_i),
    .wb_cyc_i(wbs_cyc_o[GPIO_PINS3_SNAPSHOT_COUNT_RESET_WBID0]),
    .wb_dat_i(wbs_dat_o),
    .wb_dat_o(wbs_dat_i[(GPIO_PINS3_SNAPSHOT_COUNT_RESET_WBID0+1)*32-1:(GPIO_PINS3_SNAPSHOT_COUNT_RESET_WBID0)*32]),
    .wb_err_o(wbs_err_i[GPIO_PINS3_SNAPSHOT_COUNT_RESET_WBID0]),
    .wb_rst_i(wb_rst_i),
    .wb_sel_i(wbs_sel_o),
    .wb_stb_i(wbs_stb_o[GPIO_PINS3_SNAPSHOT_COUNT_RESET_WBID0]),
    .wb_we_i(wbs_we_o)
  );

  // sw_reg: snapshot_counter
  wb_register_simulink2ppc  gpio_pins3_snapshot_counter (
    .user_clk(user_clk),
    .user_data_in(gpio_pins3_snapshot_counter_user_data_in),
    .wb_ack_o(wbs_ack_i[GPIO_PINS3_SNAPSHOT_COUNTER_WBID0]),
    .wb_adr_i(wbs_adr_o[(0+1)*32-1:(0)*32]),
    .wb_clk_i(wb_clk_i),
    .wb_cyc_i(wbs_cyc_o[GPIO_PINS3_SNAPSHOT_COUNTER_WBID0]),
    .wb_dat_i(wbs_dat_o),
    .wb_dat_o(wbs_dat_i[(GPIO_PINS3_SNAPSHOT_COUNTER_WBID0+1)*32-1:(GPIO_PINS3_SNAPSHOT_COUNTER_WBID0)*32]),
    .wb_err_o(wbs_err_i[GPIO_PINS3_SNAPSHOT_COUNTER_WBID0]),
    .wb_rst_i(wb_rst_i),
    .wb_sel_i(wbs_sel_o),
    .wb_stb_i(wbs_stb_o[GPIO_PINS3_SNAPSHOT_COUNTER_WBID0]),
    .wb_we_i(wbs_we_o)
  );

  // sw_reg: sum_ab
  wb_register_simulink2ppc  gpio_pins3_sum_ab (
    .user_clk(user_clk),
    .user_data_in(gpio_pins3_sum_ab_user_data_in),
    .wb_ack_o(wbs_ack_i[GPIO_PINS3_SUM_AB_WBID0]),
    .wb_adr_i(wbs_adr_o[(0+1)*32-1:(0)*32]),
    .wb_clk_i(wb_clk_i),
    .wb_cyc_i(wbs_cyc_o[GPIO_PINS3_SUM_AB_WBID0]),
    .wb_dat_i(wbs_dat_o),
    .wb_dat_o(wbs_dat_i[(GPIO_PINS3_SUM_AB_WBID0+1)*32-1:(GPIO_PINS3_SUM_AB_WBID0)*32]),
    .wb_err_o(wbs_err_i[GPIO_PINS3_SUM_AB_WBID0]),
    .wb_rst_i(wb_rst_i),
    .wb_sel_i(wbs_sel_o),
    .wb_stb_i(wbs_stb_o[GPIO_PINS3_SUM_AB_WBID0]),
    .wb_we_i(wbs_we_o)
  );

  // sw_reg: trig_debug_reset
  wb_register_ppc2simulink #(
    .INIT_VAL(32'h0)
  ) gpio_pins3_trig_debug_reset (
    .user_clk(user_clk),
    .user_data_out(gpio_pins3_trig_debug_reset_user_data_out),
    .wb_ack_o(wbs_ack_i[GPIO_PINS3_TRIG_DEBUG_RESET_WBID0]),
    .wb_adr_i(wbs_adr_o[(0+1)*32-1:(0)*32]),
    .wb_clk_i(wb_clk_i),
    .wb_cyc_i(wbs_cyc_o[GPIO_PINS3_TRIG_DEBUG_RESET_WBID0]),
    .wb_dat_i(wbs_dat_o),
    .wb_dat_o(wbs_dat_i[(GPIO_PINS3_TRIG_DEBUG_RESET_WBID0+1)*32-1:(GPIO_PINS3_TRIG_DEBUG_RESET_WBID0)*32]),
    .wb_err_o(wbs_err_i[GPIO_PINS3_TRIG_DEBUG_RESET_WBID0]),
    .wb_rst_i(wb_rst_i),
    .wb_sel_i(wbs_sel_o),
    .wb_stb_i(wbs_stb_o[GPIO_PINS3_TRIG_DEBUG_RESET_WBID0]),
    .wb_we_i(wbs_we_o)
  );

  // sw_reg: trig_debug_timer
  wb_register_simulink2ppc  gpio_pins3_trig_debug_timer (
    .user_clk(user_clk),
    .user_data_in(gpio_pins3_trig_debug_timer_user_data_in),
    .wb_ack_o(wbs_ack_i[GPIO_PINS3_TRIG_DEBUG_TIMER_WBID0]),
    .wb_adr_i(wbs_adr_o[(0+1)*32-1:(0)*32]),
    .wb_clk_i(wb_clk_i),
    .wb_cyc_i(wbs_cyc_o[GPIO_PINS3_TRIG_DEBUG_TIMER_WBID0]),
    .wb_dat_i(wbs_dat_o),
    .wb_dat_o(wbs_dat_i[(GPIO_PINS3_TRIG_DEBUG_TIMER_WBID0+1)*32-1:(GPIO_PINS3_TRIG_DEBUG_TIMER_WBID0)*32]),
    .wb_err_o(wbs_err_i[GPIO_PINS3_TRIG_DEBUG_TIMER_WBID0]),
    .wb_rst_i(wb_rst_i),
    .wb_sel_i(wbs_sel_o),
    .wb_stb_i(wbs_stb_o[GPIO_PINS3_TRIG_DEBUG_TIMER_WBID0]),
    .wb_we_i(wbs_we_o)
  );

  // sw_reg: trig_debug_timer_reset
  wb_register_ppc2simulink #(
    .INIT_VAL(32'h0)
  ) gpio_pins3_trig_debug_timer_reset (
    .user_clk(user_clk),
    .user_data_out(gpio_pins3_trig_debug_timer_reset_user_data_out),
    .wb_ack_o(wbs_ack_i[GPIO_PINS3_TRIG_DEBUG_TIMER_RESET_WBID0]),
    .wb_adr_i(wbs_adr_o[(0+1)*32-1:(0)*32]),
    .wb_clk_i(wb_clk_i),
    .wb_cyc_i(wbs_cyc_o[GPIO_PINS3_TRIG_DEBUG_TIMER_RESET_WBID0]),
    .wb_dat_i(wbs_dat_o),
    .wb_dat_o(wbs_dat_i[(GPIO_PINS3_TRIG_DEBUG_TIMER_RESET_WBID0+1)*32-1:(GPIO_PINS3_TRIG_DEBUG_TIMER_RESET_WBID0)*32]),
    .wb_err_o(wbs_err_i[GPIO_PINS3_TRIG_DEBUG_TIMER_RESET_WBID0]),
    .wb_rst_i(wb_rst_i),
    .wb_sel_i(wbs_sel_o),
    .wb_stb_i(wbs_stb_o[GPIO_PINS3_TRIG_DEBUG_TIMER_RESET_WBID0]),
    .wb_we_i(wbs_we_o)
  );

  // sw_reg: trig_debug_trig_rec_count
  wb_register_simulink2ppc  gpio_pins3_trig_debug_trig_rec_count (
    .user_clk(user_clk),
    .user_data_in(gpio_pins3_trig_debug_trig_rec_count_user_data_in),
    .wb_ack_o(wbs_ack_i[GPIO_PINS3_TRIG_DEBUG_TRIG_REC_COUNT_WBID0]),
    .wb_adr_i(wbs_adr_o[(0+1)*32-1:(0)*32]),
    .wb_clk_i(wb_clk_i),
    .wb_cyc_i(wbs_cyc_o[GPIO_PINS3_TRIG_DEBUG_TRIG_REC_COUNT_WBID0]),
    .wb_dat_i(wbs_dat_o),
    .wb_dat_o(wbs_dat_i[(GPIO_PINS3_TRIG_DEBUG_TRIG_REC_COUNT_WBID0+1)*32-1:(GPIO_PINS3_TRIG_DEBUG_TRIG_REC_COUNT_WBID0)*32]),
    .wb_err_o(wbs_err_i[GPIO_PINS3_TRIG_DEBUG_TRIG_REC_COUNT_WBID0]),
    .wb_rst_i(wb_rst_i),
    .wb_sel_i(wbs_sel_o),
    .wb_stb_i(wbs_stb_o[GPIO_PINS3_TRIG_DEBUG_TRIG_REC_COUNT_WBID0]),
    .wb_we_i(wbs_we_o)
  );

  // snap2: SNAP2
  snap2_v2_infrastructure  snap2_v2_infrastructure_inst (
    .clk_10MHz(clk_10MHz),
    .clk_200(clk_200),
    .clk_250MHz(clk_250MHz),
    .clk_250MHz270(clk_250MHz270),
    .pll_lock(pll_lock),
    .sys_clk0(sys_clk),
    .sys_clk180(sys_clk180),
    .sys_clk270(sys_clk270),
    .sys_clk_buf_n(sys_clk_n),
    .sys_clk_buf_p(sys_clk_p),
    .sys_rst(sys_rst)
  );

  // sys_block: sys_block0
  sys_block #(
    .BOARD_ID(13),
    .REV_MAJ(1),
    .REV_MIN(0),
    .REV_RCS(32)
  ) sys_block_inst (
    .user_clk(user_clk),
    .wb_ack_o(wbs_ack_i[SYS_BLOCK_INST_WBID0]),
    .wb_adr_i(wbs_adr_o[(0+1)*32-1:(0)*32]),
    .wb_clk_i(wb_clk_i),
    .wb_cyc_i(wbs_cyc_o[SYS_BLOCK_INST_WBID0]),
    .wb_dat_i(wbs_dat_o),
    .wb_dat_o(wbs_dat_i[(SYS_BLOCK_INST_WBID0+1)*32-1:(SYS_BLOCK_INST_WBID0)*32]),
    .wb_err_o(wbs_err_i[SYS_BLOCK_INST_WBID0]),
    .wb_rst_i(wb_rst_i),
    .wb_sel_i(wbs_sel_o),
    .wb_stb_i(wbs_stb_o[SYS_BLOCK_INST_WBID0]),
    .wb_we_i(wbs_we_o)
  );

  // microblaze: microblaze0
  // microblaze0: Microblaze Control and Monitoring subsystem
  cont_microblaze  cont_microblaze_inst (
    .ACK_I(wbm_ack_i),
    .ADR_O(wbm_adr_o),
    .CYC_O(wbm_cyc_o),
    .Clk(wb_clk_i),
    .DAT_I(wbm_dat_i),
    .DAT_O(wbm_dat_o),
    .RST_O(wbm_rst_o),
    .Reset(wb_rst_i),
    .SEL_O(wbm_sel_o),
    .STB_O(wbm_stb_o),
    .UART_rxd(UART_rxd),
    .UART_txd(UART_txd),
    .WE_O(wbm_we_o),
    .dcm_locked(1'b1),
    .ext_intr(mb_intr)
  );


  gpio_pins3  gpio_pins3_inst (
    .clk(user_clk),
    .gpio_pins3_a_user_data_out(gpio_pins3_a_user_data_out),
    .gpio_pins3_b_user_data_out(gpio_pins3_b_user_data_out),
    .gpio_pins3_in_pin_gateway(gpio_pins3_in_pin_gateway),
    .gpio_pins3_led0_gateway(gpio_pins3_led0_gateway),
    .gpio_pins3_one_gbe_app_dbg_data(gpio_pins3_one_gbe_app_dbg_data),
    .gpio_pins3_one_gbe_app_dbg_dvld(gpio_pins3_one_gbe_app_dbg_dvld),
    .gpio_pins3_one_gbe_app_rx_ack(gpio_pins3_one_gbe_app_rx_ack),
    .gpio_pins3_one_gbe_app_rx_badframe(gpio_pins3_one_gbe_app_rx_badframe),
    .gpio_pins3_one_gbe_app_rx_data(gpio_pins3_one_gbe_app_rx_data),
    .gpio_pins3_one_gbe_app_rx_dvld(gpio_pins3_one_gbe_app_rx_dvld),
    .gpio_pins3_one_gbe_app_rx_eof(gpio_pins3_one_gbe_app_rx_eof),
    .gpio_pins3_one_gbe_app_rx_overrun(gpio_pins3_one_gbe_app_rx_overrun),
    .gpio_pins3_one_gbe_app_rx_rst(gpio_pins3_one_gbe_app_rx_rst),
    .gpio_pins3_one_gbe_app_rx_srcip(gpio_pins3_one_gbe_app_rx_srcip),
    .gpio_pins3_one_gbe_app_rx_srcport(gpio_pins3_one_gbe_app_rx_srcport),
    .gpio_pins3_one_gbe_app_tx_afull(gpio_pins3_one_gbe_app_tx_afull),
    .gpio_pins3_one_gbe_app_tx_data(gpio_pins3_one_gbe_app_tx_data),
    .gpio_pins3_one_gbe_app_tx_destip(gpio_pins3_one_gbe_app_tx_destip),
    .gpio_pins3_one_gbe_app_tx_destport(gpio_pins3_one_gbe_app_tx_destport),
    .gpio_pins3_one_gbe_app_tx_dvld(gpio_pins3_one_gbe_app_tx_dvld),
    .gpio_pins3_one_gbe_app_tx_eof(gpio_pins3_one_gbe_app_tx_eof),
    .gpio_pins3_one_gbe_app_tx_overflow(gpio_pins3_one_gbe_app_tx_overflow),
    .gpio_pins3_one_gbe_app_tx_rst(gpio_pins3_one_gbe_app_tx_rst),
    .gpio_pins3_out_pin_gateway(gpio_pins3_out_pin_gateway),
    .gpio_pins3_readout_state_value_user_data_in(gpio_pins3_readout_state_value_user_data_in),
    .gpio_pins3_reset_to_listen_user_data_out(gpio_pins3_reset_to_listen_user_data_out),
    .gpio_pins3_send_trigger_user_data_out(gpio_pins3_send_trigger_user_data_out),
    .gpio_pins3_snapshot_count_reset_user_data_out(gpio_pins3_snapshot_count_reset_user_data_out),
    .gpio_pins3_snapshot_counter_user_data_in(gpio_pins3_snapshot_counter_user_data_in),
    .gpio_pins3_sum_ab_user_data_in(gpio_pins3_sum_ab_user_data_in),
    .gpio_pins3_trig_debug_reset_user_data_out(gpio_pins3_trig_debug_reset_user_data_out),
    .gpio_pins3_trig_debug_timer_reset_user_data_out(gpio_pins3_trig_debug_timer_reset_user_data_out),
    .gpio_pins3_trig_debug_timer_user_data_in(gpio_pins3_trig_debug_timer_user_data_in),
    .gpio_pins3_trig_debug_trig_rec_count_user_data_in(gpio_pins3_trig_debug_trig_rec_count_user_data_in)
  );

  // usermodule: gpio_pins3
  wbs_arbiter #(
    .N_SLAVES(N_WB_SLAVES),
    .SLAVE_ADDR(SLAVE_ADDR),
    .SLAVE_HIGH(SLAVE_HIGH),
    .TIMEOUT(1024)
  ) wbs_arbiter_inst (
    .wb_clk_i(wb_clk_i),
    .wb_rst_i(wb_rst_i),
    .wbm_ack_o(wbm_ack_i),
    .wbm_adr_i(wbm_adr_o),
    .wbm_cyc_i(wbm_cyc_o),
    .wbm_dat_i(wbm_dat_o),
    .wbm_dat_o(wbm_dat_i),
    .wbm_err_o(wbm_err_i),
    .wbm_sel_i(wbm_sel_o),
    .wbm_stb_i(wbm_stb_o),
    .wbm_we_i(wbm_we_o),
    .wbs_ack_i(wbs_ack_i),
    .wbs_adr_o(wbs_adr_o),
    .wbs_cyc_o(wbs_cyc_o),
    .wbs_dat_i(wbs_dat_i),
    .wbs_dat_o(wbs_dat_o),
    .wbs_err_i(wbs_err_i),
    .wbs_sel_o(wbs_sel_o),
    .wbs_stb_o(wbs_stb_o),
    .wbs_we_o(wbs_we_o)
  );


/*
                   _                                  _       
     /\           (_)                                | |      
    /  \   ___ ___ _  __ _ _ __  _ __ ___   ___ _ __ | |_ ___ 
   / /\ \ / __/ __| |/ _` | '_ \| '_ ` _ \ / _ \ '_ \| __/ __|
  / ____ \\__ \__ \ | (_| | | | | | | | | |  __/ | | | |_\__ \ 
 /_/    \_\___/___/_|\__, |_| |_|_| |_| |_|\___|_| |_|\__|___/
                      __/ |                                   
                     |___/                                    
*/
  // xsg: SNAP2
  assign user_clk = sys_clk;
  assign user_clk180 = sys_clk180;
  assign user_clk270 = sys_clk270;
  assign user_clk90 = sys_clk90;
  // onegbe: one_gbe
  assign phy_rst_n = ~sys_rst;
  // snap2: SNAP2
  assign clk_250MHz180 = ~clk_250MHz;
  assign clk_250MHz90 = ~clk_250MHz270;
  assign sys_clk90 = ~sys_clk270;
  // microblaze: microblaze0
  assign mb_intr = |mb_intr_v;
  assign wb_clk_i = sys_clk;
  assign wb_rst_i = sys_rst;


endmodule